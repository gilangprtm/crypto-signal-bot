# CryptoSignal AI - Docker Compose Configuration
version: '3.8'

services:
  # AI Engine (Go)
  ai-engine:
    build:
      context: ./ai-engine
      dockerfile: Dockerfile
    container_name: cryptosignal-ai-engine
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgres://cryptosignal:password@postgres:5432/cryptosignal_db
      - REDIS_URL=redis://redis:6379
      - N8N_WEBHOOK_URL=http://n8n:5678/webhook
      - LOG_LEVEL=info
      - ENVIRONMENT=development
    depends_on:
      - postgres
      - redis
    volumes:
      - ./ai-engine/config:/app/config
      - ./logs/ai-engine:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cryptosignal-network

  # n8n Workflow Engine
  n8n:
    image: n8nio/n8n:latest
    container_name: cryptosignal-n8n
    ports:
      - "5678:5678"
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n_db
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=n8n_password
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin_password
      - WEBHOOK_URL=https://your-domain.com/
      - GENERIC_TIMEZONE=Asia/Jakarta
    depends_on:
      - postgres
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/home/node/.n8n/workflows
    restart: unless-stopped
    networks:
      - cryptosignal-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cryptosignal-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=cryptosignal_db
      - POSTGRES_USER=cryptosignal
      - POSTGRES_PASSWORD=password
      - POSTGRES_MULTIPLE_DATABASES=n8n_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cryptosignal -d cryptosignal_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cryptosignal-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cryptosignal-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cryptosignal-network

  # InfluxDB (Time Series Database)
  influxdb:
    image: influxdb:2.7-alpine
    container_name: cryptosignal-influxdb
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=admin_password
      - DOCKER_INFLUXDB_INIT_ORG=cryptosignal
      - DOCKER_INFLUXDB_INIT_BUCKET=market_data
    volumes:
      - influxdb_data:/var/lib/influxdb2
    restart: unless-stopped
    networks:
      - cryptosignal-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: cryptosignal-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - cryptosignal-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: cryptosignal-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - cryptosignal-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: cryptosignal-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - ai-engine
      - n8n
      - grafana
    restart: unless-stopped
    networks:
      - cryptosignal-network

  # Telegram Bot Service
  telegram-bot:
    build:
      context: ./telegram-bot
      dockerfile: Dockerfile
    container_name: cryptosignal-telegram-bot
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - DATABASE_URL=postgres://cryptosignal:password@postgres:5432/cryptosignal_db
      - REDIS_URL=redis://redis:6379
      - AI_ENGINE_URL=http://ai-engine:8080
    depends_on:
      - postgres
      - redis
      - ai-engine
    volumes:
      - ./logs/telegram-bot:/app/logs
    restart: unless-stopped
    networks:
      - cryptosignal-network

  # Background Job Processor
  job-processor:
    build:
      context: ./job-processor
      dockerfile: Dockerfile
    container_name: cryptosignal-job-processor
    environment:
      - DATABASE_URL=postgres://cryptosignal:password@postgres:5432/cryptosignal_db
      - REDIS_URL=redis://redis:6379
      - INFLUXDB_URL=http://influxdb:8086
    depends_on:
      - postgres
      - redis
      - influxdb
    volumes:
      - ./logs/job-processor:/app/logs
    restart: unless-stopped
    networks:
      - cryptosignal-network

volumes:
  postgres_data:
  redis_data:
  influxdb_data:
  prometheus_data:
  grafana_data:
  n8n_data:

networks:
  cryptosignal-network:
    driver: bridge
